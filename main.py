import requests
import json
import time
import random
import schedule
import datetime
import os
from typing import Dict, List, Optional
import logging
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('village_blogger.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VillageContentGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini API"""
    
    def __init__(self, gemini_api_key: str):
        self.model = None
        self.api_key = gemini_api_key
        
        if not gemini_api_key:
            logger.warning("Gemini API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–æ—Å—Ç—ã")
            return
            
        try:
            genai.configure(api_key=gemini_api_key)
            
            # Try different ways to initialize the model based on library version
            try:
                # New version (1.0.0+)
                self.model = genai.GenerativeModel('gemini-1.5-flash')
                logger.info("Gemini AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)")
            except AttributeError:
                try:
                    # Try older version method
                    self.model = genai.GenerativeModel("gemini-2.0-flash")
                    logger.info("Gemini AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)")
                except AttributeError:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GenerativeModel, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                    self.model = None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini AI: {e}")
            self.model = None
        
        self.system_prompt = """
        –¢—ã ‚Äî –±–ª–æ–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –¥—É—à–µ–≤–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∂–∏—Ç–µ–ª–µ–π —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏, —Å–æ–≤–µ—Ç–∞–º–∏, –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –ª–∞–π—Ñ—Ö–∞–∫–∞–º–∏ –¥–ª—è –∂–∏–∑–Ω–∏ –≤ –¥–µ—Ä–µ–≤–Ω–µ –∏–ª–∏ —Å–µ–ª–µ.
        
        –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –¥–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏, –¥–∏–∞–ª–æ–≥–∏, –ª–∏—á–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–ª–∏ –º–µ—Å—Ç–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. 
        –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ–ø–ª—ã–º–∏, –≤—ã–∑—ã–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ —É—é—Ç–∞ –∏ –æ—Ç–∫–ª–∏–∫ —É –ª—é–¥–µ–π —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏ –º–æ–ª–æ–¥–µ–∂–∏ –∏–∑ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.
        
        –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é, —á—Ç–æ–±—ã –ª—é–¥–∏ –æ—Ö–æ—Ç–Ω–æ –ø–∏—Å–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –Ω–æ —É–º–µ—Ä–µ–Ω–Ω–æ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–∞–ª—Å—è ¬´–¥–æ–º–∞—à–Ω–∏–º¬ª.
        
        –î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: 800-1200 —Å–∏–º–≤–æ–ª–æ–≤.
        """
    
    def generate_post(self, topic: str, season: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É"""
        if not self.model:
            logger.warning("Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ—Å—Ç")
            return self._get_fallback_post(topic)
            
        current_season = season or self._get_current_season()
        
        prompt = f"""
        {self.system_prompt}
        
        –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}
        –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {current_season}
        
        –°–¥–µ–ª–∞–π –ø–æ—Å—Ç –∂–∏–≤—ã–º, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π.
        """
        
        try:
            response = self.model.generate_content(prompt)
            if response and hasattr(response, 'text') and response.text:
                logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ–º—ã: {topic}")
                return response.text
            elif response and hasattr(response, 'candidates') and response.candidates:
                # Try alternative response format
                text = response.candidates[0].content.parts[0].text
                logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–µ–º—ã: {topic}")
                return text
            else:
                logger.warning("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
                return self._get_fallback_post(topic)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return self._get_fallback_post(topic)
    
    def _get_current_season(self) -> str:
        month = datetime.datetime.now().month
        if month in [12, 1, 2]:
            return "–∑–∏–º–∞"
        elif month in [3, 4, 5]:
            return "–≤–µ—Å–Ω–∞"
        elif month in [6, 7, 8]:
            return "–ª–µ—Ç–æ"
        else:
            return "–æ—Å–µ–Ω—å"
    
    def _get_fallback_post(self, topic: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ—Å—Ç –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallback_posts = {
            "—Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –æ–≥–æ—Ä–æ–¥–µ": "üå± –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥–æ—Ä–æ–≥–∏–µ —Å–æ—Å–µ–¥–∏! –°–µ–≥–æ–¥–Ω—è —Å —Å–∞–º–æ–≥–æ —É—Ç—Ä–∞ –≤ –æ–≥–æ—Ä–æ–¥–µ –∫–æ–ø–æ—à—É—Å—å. –ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–¥–æ–≤—ã—Ö –¥–µ–ª. –ü–æ–º–∏–¥–æ—Ä—ã —É–∂–µ –ø–æ–¥–≤—è–∑—ã–≤–∞—é, –∞ –æ–≥—É—Ä—Ü—ã —Ç–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ –≤—Å—Ö–æ–¥—è—Ç. –ê —á—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ –Ω–∞ –≥—Ä—è–¥–∫–∞—Ö? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! üòä",
            "–¥–æ–º–∞—à–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è": "ü•í –ó–∞–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –Ω–∞ –∑–∏–º—É –æ–≥—É—Ä—á–∏–∫–∏ –ø–æ –±–∞–±—É—à–∫–∏–Ω–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É. –°–µ–∫—Ä–µ—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç–∏–∫ —Ö—Ä–µ–Ω–∞ –¥–ª—è —Ö—Ä—É—Å—Ç–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –¥—É–±–æ–≤—ã—Ö –ª–∏—Å—Ç—å–µ–≤ –¥–ª—è –∞—Ä–æ–º–∞—Ç–∞! –ë–∞–Ω–∫–∏ —É–∂–µ —Å—Ç–µ—Ä–∏–ª–∏–∑–æ–≤–∞–Ω—ã, —Ä–∞—Å—Å–æ–ª –≥–æ—Ç–æ–≤. –ê –∫–∞–∫–∏–µ —É –≤–∞—Å –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∑–∞–≥–æ—Ç–æ–≤–æ–∫ –Ω–∞ –∑–∏–º—É? üåø",
            "–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è": "üçû –°–µ–≥–æ–¥–Ω—è –ø–µ–∫–ª–∞ —Ö–ª–µ–± –Ω–∞ –∑–∞–∫–≤–∞—Å–∫–µ - —Ç–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –ø–æ –≤—Å–µ–º—É –¥–æ–º—É! –ë–∞–±—É—à–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏–ª–∞: —Ö–ª–µ–± –≤ –¥–æ–º–µ - —ç—Ç–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –∏ –¥–æ—Å—Ç–∞—Ç–æ–∫. –ê —É –∫–æ–≥–æ –∫–∞–∫–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –¥–æ–º–∞—à–Ω–µ–π –≤—ã–ø–µ—á–∫–∏ –µ—Å—Ç—å? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ü–µ–ø—Ç–∏–∫–∞–º–∏! ü•ñ",
            "–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–∏": "üòÑ –í—á–µ—Ä–∞ —Ç–∞–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–∫–ª—é—á–∏–ª–∞—Å—å! –°–æ—Å–µ–¥—Å–∫–∏–π –∫–æ—Ç –í–∞—Å—å–∫–∞ —É–º—É–¥—Ä–∏–ª—Å—è –∑–∞–ª–µ–∑—Ç—å –≤ –∫—É—Ä—è—Ç–Ω–∏–∫ –∏ —É—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–º –ø–µ—Ä–µ–ø–æ–ª–æ—Ö. –ö—É—Ä—ã –∫—É–¥–∞—Ö—á—É—Ç, –∫–æ—Ç –º—è—É–∫–∞–µ—Ç, –∞ —è —Å –≤–µ–Ω–∏–∫–æ–º –±–µ–≥–∞—é. –í –∏—Ç–æ–≥–µ –≤—Å–µ –∂–∏–≤—ã-–∑–¥–æ—Ä–æ–≤—ã, —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–≤—ã –ø–æ—Ç—Ä–µ–ø–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É! –ê —É –≤–∞—Å –∫–∞–∫–∏–µ –∑–∞–±–∞–≤–Ω—ã–µ —Å–ª—É—á–∞–∏ –±—ã–≤–∞—é—Ç? üê±",
            "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –¥–æ–º–∞": "üîß –î–µ–ª—é—Å—å –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º: —á—Ç–æ–±—ã –º–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –¥–æ–ª—å—à–µ —Å–ª—É–∂–∏–ª–∞, –ø—Ä–æ—Ç–∏—Ä–∞–π—Ç–µ –µ—ë —Å–ª–∞–±—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º —É–∫—Å—É—Å–∞ - –∏ –∫–æ–º–∞—Ä—ã –º–µ–Ω—å—à–µ –ª–∏–ø–Ω—É—Ç, –∏ —Å–µ—Ç–∫–∞ –Ω–µ –∂–µ–ª—Ç–µ–µ—Ç. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ! –ê –∫–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –¥–æ–º–∞? üè†",
            "–∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ç–∏—Ü–µ–≤–æ–¥—Å—Ç–≤–æ": "üêî –ö—É—Ä–æ—á–∫–∏ –º–æ–∏ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ –Ω–µ—Å—É—Ç—Å—è - –≤–∏–¥–∏–º–æ, –ø–æ–≥–æ–¥–∞ –∏–º –Ω—Ä–∞–≤–∏—Ç—Å—è! –°–≤–µ–∂–∏–µ —è–∏—á–∫–∏ –∫ –∑–∞–≤—Ç—Ä–∞–∫—É - —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ? –ì–ª–∞–≤–Ω–æ–µ - —Ö–æ—Ä–æ—à–æ –∫–æ—Ä–º–∏—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —á–∏—Å—Ç–æ—Ç–µ. –ê —É –∫–æ–≥–æ –∫–∞–∫–∞—è –∂–∏–≤–Ω–æ—Å—Ç—å –≤–æ –¥–≤–æ—Ä–µ? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ! ü•ö",
            "–º–µ—Å—Ç–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ –æ–±—ã—á–∞–∏": "üé≠ –°–∫–æ—Ä–æ —É –Ω–∞—Å –≤ —Å–µ–ª–µ —è—Ä–º–∞—Ä–∫–∞ –Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–º—ã—Å–ª–æ–≤ –±—É–¥–µ—Ç. –ë–∞–±—É—à–∫–∏ –≥–æ—Ç–æ–≤—è—Ç —Å–≤–æ–∏ –∫–æ–≤—Ä–∏–∫–∏ –∏ –≤—è–∑–∞–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è, –º—É–∂–∏–∫–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ø–æ–¥–µ–ª–∫–∏ –º–∞—Å—Ç–µ—Ä—è—Ç. –•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∂–∏–≤—ã! –ê –≤ –≤–∞—à–∏—Ö –∫—Ä–∞—è—Ö –∫–∞–∫–∏–µ –Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç? üé®",
            "–æ–±—â–µ–µ": "‚òÄÔ∏è –ö–∞–∫–æ–µ –∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —É—Ç—Ä–æ —Å–µ–≥–æ–¥–Ω—è! –ü—Ç–∏—á–∫–∏ –ø–æ—é—Ç, –≤–æ–∑–¥—É—Ö —Å–≤–µ–∂–∏–π, —Ä–æ—Å–∞ –Ω–∞ —Ç—Ä–∞–≤–µ –±–ª–µ—Å—Ç–∏—Ç. –í—ã–π–¥–µ—à—å –Ω–∞ –∫—Ä—ã–ª—å—Ü–æ - –∏ –¥—É—à–∞ —Ä–∞–¥—É–µ—Ç—Å—è. –ñ–∏–≤–µ–º –≤ —Ä–∞—é, —Ç–æ–ª—å–∫–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —ç—Ç–æ –∑–∞–º–µ—á–∞–µ–º. –ê —á—Ç–æ –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º! üå∏"
        }
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–π —Ç–µ–º—ã –Ω–µ—Ç, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for key in fallback_posts:
            if any(word in topic.lower() for word in key.split()):
                return fallback_posts[key]
        
        return fallback_posts["–æ–±—â–µ–µ"]

class VKPoster:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK API"""
    
    def __init__(self, access_token: str, group_id: str):
        if not access_token or not group_id:
            raise ValueError("VK access token –∏ group ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
            
        self.access_token = access_token
        self.group_id = group_id.replace('-', '')  # –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        self.api_version = '5.131'
        self.base_url = 'https://api.vk.com/method/'
    
    def post_to_wall(self, message: str, attachments: str = None) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"""
        url = f"{self.base_url}wall.post"
        
        params = {
            'owner_id': f'-{self.group_id}',
            'message': message,
            'from_group': 1,
            'access_token': self.access_token,
            'v': self.api_version
        }
        
        if attachments:
            params['attachments'] = attachments
        
        try:
            response = requests.post(url, params=params)
            result = response.json()
            
            if 'error' in result:
                logger.error(f"VK API Error: {result['error']}")
                return False
            
            logger.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω. ID: {result['response']['post_id']}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def get_wall_posts(self, count: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã —Å–æ —Å—Ç–µ–Ω—ã"""
        url = f"{self.base_url}wall.get"
        
        params = {
            'owner_id': f'-{self.group_id}',
            'count': count,
            'access_token': self.access_token,
            'v': self.api_version
        }
        
        try:
            response = requests.post(url, params=params)
            result = response.json()
            
            if 'error' in result:
                logger.error(f"VK API Error: {result['error']}")
                return []
            
            return result['response']['items']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
            return []

class VillageBloggerAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞-–±–ª–æ–≥–≥–µ—Ä–∞"""
    
    def __init__(self, vk_token: str, group_id: str, gemini_api_key: str):
        self.vk_poster = VKPoster(vk_token, group_id)
        self.content_generator = VillageContentGenerator(gemini_api_key)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã —Å –≤–µ—Å–∞–º–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.topics = {
            '—Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –æ–≥–æ—Ä–æ–¥–µ': 0.25,
            '–¥–æ–º–∞—à–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è': 0.20,
            '–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è': 0.15,
            '–¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É—á–∞–∏': 0.15,
            '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –¥–æ–º–∞': 0.10,
            '–∂–∏–≤–æ—Ç–Ω–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –ø—Ç–∏—Ü–µ–≤–æ–¥—Å—Ç–≤–æ': 0.10,
            '–º–µ—Å—Ç–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∏ –æ–±—ã—á–∞–∏': 0.05
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ (—á–∞—Å—ã)
        self.posting_hours = [7, 12, 16, 19]  # –£—Ç—Ä–æ, –æ–±–µ–¥, –ø–æ—Å–ª–µ –æ–±–µ–¥–∞, –≤–µ—á–µ—Ä
        
        self.last_post_time = None
        self.min_interval_hours = 4  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        
    def should_post_now(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å"""
        current_time = datetime.datetime.now()
        current_hour = current_time.hour
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞
        if current_hour not in self.posting_hours:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        if self.last_post_time:
            time_diff = current_time - self.last_post_time
            if time_diff.total_seconds() < self.min_interval_hours * 3600:
                return False
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è)
        return random.random() < 0.7
    
    def select_topic(self) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤"""
        topics = list(self.topics.keys())
        weights = list(self.topics.values())
        return random.choices(topics, weights=weights)[0]
    
    def analyze_recent_performance(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        posts = self.vk_poster.get_wall_posts(count=20)
        
        if not posts:
            return {}
        
        total_likes = sum(post.get('likes', {}).get('count', 0) for post in posts)
        total_comments = sum(post.get('comments', {}).get('count', 0) for post in posts)
        total_reposts = sum(post.get('reposts', {}).get('count', 0) for post in posts)
        total_views = sum(post.get('views', {}).get('count', 0) for post in posts)
        
        avg_engagement = {
            'likes': total_likes / len(posts),
            'comments': total_comments / len(posts),
            'reposts': total_reposts / len(posts),
            'views': total_views / len(posts)
        }
        
        logger.info(f"–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_engagement}")
        return avg_engagement
    
    def create_and_post(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
        try:
            topic = self.select_topic()
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic}")
            
            post_content = self.content_generator.generate_post(topic)
            logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(post_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            success = self.vk_poster.post_to_wall(post_content)
            
            if success:
                self.last_post_time = datetime.datetime.now()
                logger.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                return True
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def run_posting_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
        
        if self.should_post_now():
            logger.info("–í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞!")
            self.create_and_post()
        else:
            logger.info("–ü–æ–∫–∞ –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∞")
    
    def start_continuous_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        logger.info("üåæ –ó–∞–ø—É—Å–∫ Village Blogger Agent –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
        schedule.every().hour.do(self.run_posting_cycle)
        
        # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.run_posting_cycle()
        
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º

class AgentManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    def __init__(self, agent: VillageBloggerAgent):
        self.agent = agent
    
    def post_now(self, topic: str = None):
        """–§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
        if topic:
            content = self.agent.content_generator.generate_post(topic)
        else:
            topic = self.agent.select_topic()
            content = self.agent.content_generator.generate_post(topic)
        
        return self.agent.vk_poster.post_to_wall(content)
    
    def get_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        status = {
            'last_post_time': self.agent.last_post_time,
            'next_possible_post': None,
            'performance': self.agent.analyze_recent_performance()
        }
        
        if self.agent.last_post_time:
            next_time = self.agent.last_post_time + datetime.timedelta(hours=self.agent.min_interval_hours)
            status['next_possible_post'] = next_time
        
        return status
    
    def change_posting_schedule(self, hours: List[int]):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.agent.posting_hours = hours
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {hours}")

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = ['VK_ACCESS_TOKEN', 'GROUP_ID', 'GEMINI_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logger.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        logger.info("VK_ACCESS_TOKEN=your_vk_token")
        logger.info("GROUP_ID=-your_group_id")
        logger.info("GEMINI_API_KEY=your_gemini_key")
        return False
    
    return True

def start_village_blogger():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–æ–≥–æ –±–ª–æ–≥–≥–µ—Ä–∞"""
    
    if not validate_environment():
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    VK_ACCESS_TOKEN = os.getenv('VK_ACCESS_TOKEN')
    GROUP_ID = os.getenv('GROUP_ID')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    try:
        agent = VillageBloggerAgent(VK_ACCESS_TOKEN, GROUP_ID, GEMINI_API_KEY)
        logger.info("–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        agent.start_continuous_mode()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")

def test_agent():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
    
    if not validate_environment():
        return
    
    VK_ACCESS_TOKEN = os.getenv('VK_ACCESS_TOKEN')
    GROUP_ID = os.getenv('GROUP_ID')
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    
    try:
        agent = VillageBloggerAgent(VK_ACCESS_TOKEN, GROUP_ID, GEMINI_API_KEY)
        manager = AgentManager(agent)
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        test_topic = "—Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –æ–≥–æ—Ä–æ–¥–µ"
        content = agent.content_generator.generate_post(test_topic)
        print(f"‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        print(f"–¢–µ–º–∞: {test_topic}")
        print(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = manager.get_status()
        print(f"‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status}")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    # pip install requests schedule google-generativeai python-dotenv
    
    print("üåæ –î–ï–†–ï–í–ï–ù–°–ö–ò–ô –ë–õ–û–ì–ì–ï–† –ê–ì–ï–ù–¢ üåæ")
    print("=" * 50)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –≤ VK")
    print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 50)
    
    # –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        test_agent()
    else:
        start_village_blogger()